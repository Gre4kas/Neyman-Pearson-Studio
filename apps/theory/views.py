from django.shortcuts import render, get_object_or_404
from django.http import HttpRequest, HttpResponse, JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.contrib.admin.views.decorators import staff_member_required
from django.core.files.storage import default_storage
from django.conf import settings
import json
import os
import uuid
from .models import Article

def article_list_view(request: HttpRequest) -> HttpResponse:
    articles = Article.objects.all()
    context = {
        'articles': articles
    }
    return render(request, 'theory/article_list.html', context)

def article_detail_view(request: HttpRequest, slug: str) -> HttpResponse:
    article = get_object_or_404(Article, slug=slug)
    context = {
        'article': article
    }
    return render(request, 'theory/article_detail.html', context)

@staff_member_required
@csrf_exempt
@require_http_methods(["POST"])
def admin_preview_view(request: HttpRequest) -> JsonResponse:
    """AJAX —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ - —Å MathJax —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º"""
    try:
        data = json.loads(request.body)
        content = data.get('content', '')
        
        if not content:
            return JsonResponse({
                'success': True,
                'html': '<div style="color: #666; font-style: italic; text-align: center; padding: 20px;">üìù –ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä...</div>'
            })
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - —É–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã CKEditor
        import re
        
        # –£–±–∏—Ä–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏
        processed_content = re.sub(r'<script[^>]*>.*?</script>', '', content, flags=re.IGNORECASE | re.DOTALL)
        processed_content = re.sub(r'<iframe[^>]*>.*?</iframe>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã CKEditor
        processed_content = re.sub(r'<div[^>]*class="[^"]*ck-widget__type-around[^"]*"[^>]*>.*?</div>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        processed_content = re.sub(r'<div[^>]*ck-widget__type-around[^>]*>.*?</div>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        processed_content = re.sub(r'<div[^>]*ck-tooltip[^>]*>.*?</div>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        processed_content = re.sub(r'<div[^>]*ck-balloon-panel[^>]*>.*?</div>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        processed_content = re.sub(r'<button[^>]*ck-widget__type-around__button[^>]*>.*?</button>', '', processed_content, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        processed_content = re.sub(r'<p[^>]*>&nbsp;</p>', '', processed_content)
        processed_content = re.sub(r'<p[^>]*>\s*</p>', '', processed_content)
        processed_content = re.sub(r'<p[^>]*>(\s|&nbsp;)*</p>', '', processed_content)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç–∏–ª–µ–π
        processed_content = re.sub(
            r'<figure[^>]*class="([^"]*image[^"]*)"([^>]*)>', 
            lambda m: f'<figure class="{m.group(1).strip()}"{m.group(2)}>', 
            processed_content, 
            flags=re.IGNORECASE
        )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç–∏–ª–µ–π
        processed_content = re.sub(
            r'<figure[^>]*class="([^"]*table[^"]*)"([^>]*)>', 
            lambda m: f'<figure class="{m.group(1).strip()}"{m.group(2)}>', 
            processed_content, 
            flags=re.IGNORECASE
        )
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        processed_content = re.sub(r'>\s+<', '><', processed_content)
        processed_content = re.sub(r'\n\s*\n\s*\n', '\n\n', processed_content)
        processed_content = processed_content.strip()
        
        # –ù–ï –∑–∞–º–µ–Ω—è–µ–º LaTeX —Ñ–æ—Ä–º—É–ª—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –¥–ª—è MathJax
        # –§–æ—Ä–º—É–ª—ã $...$ –∏ $$...$$ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, —á—Ç–æ–±—ã MathJax –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–ª
        
        return JsonResponse({
            'success': True,
            'html': processed_content,
            'trigger_mathjax': True  # –°–∏–≥–Ω–∞–ª –¥–ª—è JavaScript —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å MathJax
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })

@staff_member_required
@csrf_exempt
@require_http_methods(["POST"])
def upload_image_view(request: HttpRequest) -> JsonResponse:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ç–∞—Ç–µ–π"""
    try:
        if 'image' not in request.FILES:
            return JsonResponse({
                'success': False,
                'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'
            })
        
        image_file = request.FILES['image']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        allowed_types = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml']
        if image_file.content_type not in allowed_types:
            return JsonResponse({
                'success': False,
                'error': '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, GIF, WebP, SVG'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        if image_file.size > 10 * 1024 * 1024:
            return JsonResponse({
                'success': False,
                'error': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 10MB'
            })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_ext = os.path.splitext(image_file.name)[1]
        unique_filename = f"{uuid.uuid4().hex}{file_ext}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –≤ –ø–∞–ø–∫–µ media/theory/images/
        file_path = f"theory/images/{unique_filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        saved_path = default_storage.save(file_path, image_file)
        
        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        file_url = settings.MEDIA_URL + saved_path
        
        return JsonResponse({
            'success': True,
            'url': file_url,
            'filename': unique_filename,
            'original_name': image_file.name
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        })